h1. !{vertical-align:middle}https://github.com/arquillian/arquillian.github.com/raw/develop/images/arquillian_icon_64.png! Arquillian Website Source

This repository contains the source of the Arquillian website (hosted using "github pages":http://pages.github.com), to which the "arquillian.org":arquillian.org hostname resolves.

The website is built using "Awestruct":awestruct.org. The develop branch contains the unprocessed website source. From that content, Awestruct generates a static website under the @_site@ directory. The website is published to the public site by pushing the contents of the @_site@ directory to the master branch.

h2. Setting Up Awestruct

You need to have Awestruct installed on your machine to preview the website locally. Awestruct is a available as Ruby gem in the GemCutter repository. You can install it into either a native Ruby or a JRuby installation. The instructions here will cover setting up Awestruct in both native Ruby and JRuby installation for Linux environment.

Begin by installing the package for Ruby and RubyGems.

h3. Installing Ruby and RubyGems on Ubuntu

If you have Ubuntu, use this command to install Ruby and RubyGems:

bc. $ sudo apt-get install rubygems

Ubuntu does not currently add the RubyGems bin directory to your path. Put the following files in your shell configuration file (.bashrc) and restart the shell.

bc. $ export GEM_HOME=/var/lib/gems/1.8 \ 
export PATH=$PATH:$GEM_HOME/bin

Now the executables for any gem you install will be available on your path.

h3. Installing JRuby on Ubuntu

It might happen that you will face "similar problem":https://gist.github.com/1392032 while trying to install awestruct using Ruby on Ubuntu. In that case using JRuby as an alternative might solve it.

First, download and unpack latest stable version of JRuby: (The one available in Ubuntu repositories is too old and does not support Awestruct) 

bc. $ wget http://jruby.org.s3.amazonaws.com/downloads/1.6.5/jruby-bin-1.6.5.tar.gz \
tar -xzvf jruby-bin-1.6.5.tar.gz  

Optionally you can copy it to @/usr/lib/jvm@ and create symbolic link for convenience

bc. $ sudo mv jruby-1.6.5/ /usr/lib/jvm \
cd /usr/lib/jvm/ \
sudo ln -s jruby-1.6.5/ jruby 

Last step is adding JRuby to path (for instance in @.bashrc@)

bc. $ export JRUBY_HOME=/usr/lib/jvm/jruby \
export PATH="$JRUBY_HOME/bin:$PATH"

That's it. Just install all required gems described in subsequent sections and you are ready to run awestruct backed by JRuby!
*NOTE* Use @jgem@ instead of @gem@ for this purpose.

h3. Installing Ruby and RubyGems on Fedora

If you have Fedora, use this command to install Ruby:

bc. $ sudo yum install ruby ruby-devel ruby-libs ruby-mode ruby-rdoc ruby-irb ruby-ri ruby-docs ruby-mysql ruby-sqlite3

You then need to install RubyGems manually:

bc.. $ wget -q http://rubyforge.org/frs/download.php/55066/rubygems-1.3.2.tgz \
tar xzf rubygems-1.3.2.tgz \
cd rubygems-1.3.2 \
sudo ruby setup.rb

p. If you get stuck, refer to "this guide":http://www.technetra.com/2009/04/22/howto-setting-up-ruby-on-rails-for-fedora-10-and-11 for more details.

h3. Installing the Awestruct Gem

Now you are ready to install the awestruct gem and it's dependencies. The remainder of the commands work on any Ruby installation:

bc. $ sudo gem install awestruct

If you get a compiler error when RedCloth is installing, use this command instead:

bc. $ sudo gem install awestruct -- --with-cflags=\"-O2 -pipe -march=native -Wno-unused-but-set-variable\"

You're all set!

p. Make sure you have Awestruct >= 0.2.5. If you already have Awestruct installed, you may need to update it using this command:

bc. $ sudo gem update awestruct

h3. Additional Required Gems

As the website matures, more gems will be required. This section documents the required third-party gems not already installed by Awestruct.

Install these Gems using the @gem install@ command as you did above.

* rest-client
* git
* sassy-buttons
* vpim
* json
* jruby-openssl (if using jruby)
* rb-inotify (if using linux)

h2. Previewing the Site Locally

Now that you have awestruct installed, you can preview the website locally by running it in development mode. Development mode uses a file monitor to automatically update the site when you make a change to the source files.

To run the site, you first need the source code. Begin by cloning the website source code from git:

bc. git clone git://github.com/arquillian/arquillian.github.com.git

Then, switch to the develop branch (the master branch holds the published site only):

bc. git checkout develop

Run the following command to launch the preview server:

bc. awestruct -d

Visit the following page in your browser:

"http://localhost:4242":http://localhost:4242

You're now awestruct!

If you only want to generate once when you start the server, use this command:

bc. awestruct --server -P development

Add the @--force@ flag to either command to regenerate the site from scratch. You can also remove the _tmp and _site directories to clean the generated files.

h2. Conventions

"Haml":http://haml-lang.com is the preferred abstract HTML markup language.

* "Haml Reference":http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html

 "Textile":http://redcloth.org/textile is the preferred text markup language.

* "Textile Reference":http://redcloth.org/textile

"Sass":http://sass-lang.com and "Compass":http://compass-style.org are the preferred CSS frameworks.

* "Sass Reference":http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html
* "Compass Reference":http://compass-style.org/reference/compass

Source files are indented using 2 spaces. Haml files require the same indentation size throughout. Ruby hashes should have no leading or trailing spaces and options such be seperated by a comma followed by a space (e.g., @{:href=>"http://arquillian.org", title=>"Arquillian Project Site"}@).

Note: In a HAML document, if you use the equals seperator (=) rather than a greater than equals (=>) in a hash key-value assignment, Awestruct will crash.

h2. Page structure

* #banner
** h2#logo
** #navigation
* #main
** #content-header
*** h1
** #content
*** .post
**** .header
***** h2.title
***** .byline
**** .body
**** .footer
** #sidebar
* #footer

h2. Writing a Blog Entry

Writing a blog entry is very easy. All you have to do is fill in a brief prolog at the top of the file, then just type your content. The rest is handled for you.

h3. Filename

To write a blog entry, create a new textile document with the file extension .textile in the blog/ folder. The name of the file is important. It determines the date of the blog entry and the URL. The syntax is:

bq. YYYY-MM-DD-URL.textile

You cannot use dots or spaces in the URL segment.

For example:

bq. 2011-10-02-announcing-arquillian-1-0.textile

h3. Prolog

The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata:

* layout (always "blog")
* title (use sentence capitalization)
* author
* tags (array structure, limit to 5, use singular forms as in "release")

Here's an example (refer to HTML output):

pre. ---
layout: blog
title: Announcing Arquillian 1.0!
author: Aslak Knutsen
tags: [ announcements, releases ]
--- << only copy the hyphens and the lines of text between them

h3. Content

Below the prolog, you just type in textile format.

h3. Code

To insert syntax highlighted code, followed by paragraph text, use the following syntax (refer to HTML output of this guide):

bc(prettify).. public class Alien {
    public String getName() {
        return "Ike";
    }
}

p. This sentence will appear below the code.

You don't normally need to use the p. prefix to enter a paragrah. However, it's required after a code block to indicate to the parser that the code snippet has ended. If the content following the code is not paragraph text (for instance, a list item), use notextile. instead of p., but include one space at the end of the line.

The language is detected automatically.

If you are running awestruct in preview mode, you need to touch the blog/index.html.haml file to see the blog show up in the index (likely a bug).

h3. Images

Images should be put in the images/blog/ folder. An image should be no more than 600px wide.

h2. Writing a Release Note

p. Writing a release note is even easier than blog post. There is a template file created for this purpose @blog/_github-release-template.textile@. 

p. Simply name your file using following convention @[repository-name]-[versionId].textile@ (eg. @arquillian-core-1.0.0.CR6.textile@). Fill in the most important features which are part of this particular release.

p. Other things like JIRA tasks are picked up automatically.

p. If for some reason you are not able to see your release notes on @blog/@ aggregator page, perform following steps:

p. Delete where tag/release information is read from:

bc. rm -rf _tmp/repos/[repo-that-contain-release]

p. Delete the overview from JIRA that contains all released versions:

bc. rm -rf _tmp/jira/jira-ARQ.json

p. Then restart awestruct and everything should work nicely.

h2. Writing a Guide

Writing a guide is much like writing a blog entry (and, as such, just as easy). You need to supply some prolog information, a header stating what the guide covers and content partitioned using level 3 (h3) headings. The rest is handled for you, including the table of contents and listing in the index.

*IMPORTANT* When committing a guide, put it in a commit by itself and use a commit message that describes to a reader what changed. Commit messages are used as the guide's changelog.

h3. Filename

To write a blog entry, create a new textile document with the file extension .textile in the guides/ folder. The name of the file will become the last path in the guide's URL and thus should closely match the guide's title. Since it's part of the URL, the filename should not contain spaces.

h3. Prolog

The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata:

* layout (always "guide")
* title (use title capitalization)
* authors (comma seperated list of original authors of the guide)
* tags (comma seperated list)
* guide_summary (summary text to be used in the guide index)
* guide_group (numeric; 1 = beginner, 2 = intermediate, 3 = advanced)
* guide_order (numeric weight; less is more)

Here's an example (refer to HTML output):

pre. ---
layout: guide
title: Getting Started
authors: [Dan Allen]
tags: [cdi, weld, maven, forge, eclipse]
guide_summary: Learn how to add Arquillian to the test suite of your project and write your first Arquillian test.
guide_group: 1
guide_order: 10
--- << only copy the hyphens and the lines of text between them

h3. Content

Below the prolog, you type in textile format.

You should begin each guide with a summary that lays out what the guide covers. It should be regular paragraph text surrounding a list of topics.

The remainder of the content should be divided into level 3 (h3) headings. The heading title should be no more than 20 characters and use title capitalization.

NOTE: Currently, you cannot use acronyms in the heading of a guide section.

h3. Code

Refer to the instruction for writing a blog entry to learn how to enter code.

h3. Images

Images should be put in the images/guides/ folder.

h2. Textile Extensions

You can add emoticons by immediately preceding any of the following smile symbols with tilde (~):

- :) := smile
- ;) := wink
- :S := confused
- :D := happy

Here's an example ~;)

h2. Resources

* Currently using Google Prettify, could use "jQuery wrapper":http://balupton.github.com/jquery-syntaxhighlighter
* Icons from Faenza Gnome icon theme
* A pure CSS sticky footer technique: http://ryanfait.com/sticky-footer/
* Font typography: http://www.dev-archive.net/articles/typograph1-en.html#Ch23
* Ideas for textile plugins: http://octopress.org/docs/plugins/
* HTML/CSS/JS 'fiddle' tool: http://jsfiddle.net
* Sass resources: http://thesassway.com/
* Language codes: http://joeclark.org/book/sashay/serialization/AppendixB.html
